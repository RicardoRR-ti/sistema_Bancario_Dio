import textwrap




menu = """

[u] Novo Usuário
[c] Nova Conta
[x] Dados da conta
[d] Depositar
[s] Sacar
[e] Extrato
[q] Sair

=> """


saldo = 0
limite = 500
extrato = ""
numero_saques = 0
LIMITE_SAQUES = 3 
list_extrato = ""
list_endereco = []
list_usuario = []
lista_usuario2 = []
list_conta = []




def executa():

    while True:        
        opcao = input(f"{menu} Escolha a operação: ")
        if opcao == "d":
             valor = float(input("Informe o valor do depósito: "))         
             deposito(valor)
        elif opcao == "u":
             novo_usuario()
        elif opcao == "c":
            cria_conta()        
        elif opcao == "s":
            valor = float(input("Informe o valor do saque: "))
            saque(valor)
        elif opcao == "x":
            lista_dados_babncarios()
        elif opcao == "e":
            get_extrato(saldo)
        elif opcao == "q":
            break
        else:
             print("Operação inválida, por favor selecione novamente a operação desejada.")


################### Listar Dados  Bancários#####################

def lista_dados_babncarios():
    global list_usuario
    if len(list_usuario) == 0:
        print("Dados inexistente, favor cadastre os dados de usuário...\n")
    else:
        mostra_usuario()
        get_contas(lista_usuario2)



################### usuário ########################    

# cadastra o usuário no banco
def novo_usuario():
    global list_usuario, list_endereco
    
    print("*** Informe os dados pessoais. ***\n")
    list_usuario.append(input("Informe o nome do usuário:\t"))  
    list_usuario.append(input("Informe a data de nascimento:\t"))
    list_usuario.append(input("Informe o CPF:\t")) 

    print("\n*** Informe o seu endereço ***\n")
    list_endereco.append(input("Informe o nome da sua rua:\t"))
    list_endereco.append(input("Informe o numero da sua casa:\t"))
    list_endereco.append(input("Informe o bairro:\t"))
    list_endereco.append(input("Informe a sua cidade\t"))

    mostra_usuario()

#Monstra os dados do usuário
def mostra_usuario():
    global list_endereco, list_usuario

    print("\n***************** DADOS DO USUÁRIO ******************")
    print(f"Nome:\t {list_usuario[0]}")
    print(f"Data de Nascimento:\t {list_usuario[1]}")
    print(f"CPF:\t {list_usuario[2]}\n") 
    print("\n*** EMDEREÇO ***")
    print(f"Rua:\t {list_endereco[0]}, {list_endereco[1]}, {list_endereco[2]}, {list_endereco[3]}\n")   
    print("*******************************************************\n") 




#################### CONTA ########################

#Cria a conta do usuário
def cria_conta():
    global list_conta,  lista_usuario2
    numero_conta = 1
    indice = int(0) 
    numero_agencia = "0001"    
    continua = True
  


    while continua:

         list_conta = [numero_conta, numero_agencia,list_usuario[2]]      
         lista_usuario2.append(list_conta)
      
         print("Conta criada con sucesso.\n")         

         numero_conta += 1
         indice += 1

         continua = input("\n ***** Para criar uma nova conta digite S senão N  *****")

         if continua == "s":
             continua = True
         else:
             continua = False           
             get_contas(lista_usuario2)


#Lista as contas do usuário
def get_contas(lista = []):
  
  for indice in range(len(lista)):
    print("\n***************************************\n")
    print(f"Numero da conta:\t{lista[indice][0]}")
    print(f"Agencia:\t\t{lista[indice][1]}")
    print(f"Cpf do usuário:\t\t{lista[indice][2]}")



##################### SAQUE ######################        

## efetua o saque 
def saque(self,valor: "0"):
    global saldo
    if (limite_operacoes_saques()) and limite_valor_saque(valor):
        if(saldo >= valor): 
            saldo -= valor
            set_extrato(valor,"saque")
            print("Saque relalizado com sucesso.")
            return True    
        else:
            print("Operação falhou! seu saldo é insuficiente.")             
    else:        
        return False
    
    
## método responsável em verificar se não exedeu o limite diário de saques
def limite_operacoes_saques(self):
    global LIMITE_SAQUES, numero_saques
    if LIMITE_SAQUES > numero_saques:
        numero_saques += 1
        print(numero_saques)
        return True
    else:
        print("Operação falhou! Exedeu o número de tentativas para esta operação.")
        return False



## Método responsável em vereficar se o saque execeu o limite máximo.
def limite_valor_saque(self,valor):
    if limite < valor:
        print(f"Operação falhou! O valor do saque excede o limite de {limite:.2f}.")
        return False
    else:
        return True
    


######################## DEPÓSITO ############################

def deposito(self,valor):   
    global saldo
    if valor > 0:     
        saldo += valor
        set_extrato(valor,"deposito")
        print(f"Depósito realisado com sucesso no valor de {valor:.2f}")




########################### EXTRATO ###########################

## Armazena as transações na lista list_extrato
def set_extrato(self,valor,saldo, extrato="", operacao="nome"):
    global list_extrato  

    match operacao:
        case "deposito":          
              list_extrato += str(f"Depósito: R$ {valor:.2f}\n")                
        case "saque":
              list_extrato += str(f"Saque: R$ {valor:.2f}\n")
        case "none":
            print("")


                   
   
## Informa o extrato
def get_extrato(self,valor,saldo="0", extrato="", operacao="nome"):
    global list_extrato
   
    print("\n================ EXTRATO ================")
    if  len(f"{list_extrato}")  == 0:
        print("Não foram realizadas movimentações.")
    else:
         print(list_extrato)
         print(f"\nSaldo: R$ {saldo:.2f}")
    print("==========================================")



executa()